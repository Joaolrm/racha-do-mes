import {
  Controller,
  Get,
  Param,
  ParseIntPipe,
  UseGuards,
  Query,
} from '@nestjs/common';
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiBearerAuth,
  ApiQuery,
} from '@nestjs/swagger';
import { BalanceService } from './balance.service';
import { JwtAuthGuard } from '../auth/jwt-auth.guard';
import { CurrentUser } from '../auth/decorators/current-user.decorator';
import { UserBalanceSummaryDto } from './dto/balance-response.dto';
import { HistoryResponseDto } from './dto/history-response.dto';

@ApiTags('Saldos e HistÃ³rico')
@ApiBearerAuth()
@UseGuards(JwtAuthGuard)
@Controller('balance')
export class BalanceController {
  constructor(private readonly balanceService: BalanceService) {}

  @Get('me')
  @ApiOperation({
    summary: 'Obter saldo do usuÃ¡rio autenticado',
    description:
      'Retorna resumo completo de dÃ­vidas e crÃ©ditos do usuÃ¡rio logado',
  })
  @ApiResponse({
    status: 200,
    description: 'Saldo do usuÃ¡rio',
    type: UserBalanceSummaryDto,
  })
  getMyBalance(@CurrentUser() user: any) {
    return this.balanceService.getUserBalance(user.userId);
  }

  @Get('user/:userId')
  @ApiOperation({
    summary: 'Obter saldo de um usuÃ¡rio especÃ­fico',
    description: 'Retorna resumo completo de dÃ­vidas e crÃ©ditos de um usuÃ¡rio',
  })
  @ApiResponse({
    status: 200,
    description: 'Saldo do usuÃ¡rio',
    type: UserBalanceSummaryDto,
  })
  @ApiResponse({ status: 404, description: 'UsuÃ¡rio nÃ£o encontrado' })
  getUserBalance(@Param('userId', ParseIntPipe) userId: number) {
    return this.balanceService.getUserBalance(userId);
  }

  @Get('all')
  @ApiOperation({
    summary: 'Obter todos os saldos',
    description: 'Lista todas as relaÃ§Ãµes de dÃ©bito/crÃ©dito entre usuÃ¡rios',
  })
  @ApiResponse({ status: 200, description: 'Lista de saldos' })
  getAllBalances() {
    return this.balanceService.getAllBalances();
  }

  @Get('history')
  @ApiOperation({
    summary: 'Obter histÃ³rico de transaÃ§Ãµes',
    description: 'Lista histÃ³rico de todas as transaÃ§Ãµes que geraram saldos',
  })
  @ApiResponse({
    status: 200,
    description: 'HistÃ³rico de transaÃ§Ãµes',
    type: [HistoryResponseDto],
  })
  @ApiQuery({
    name: 'userId',
    required: false,
    description: 'Filtrar histÃ³rico por usuÃ¡rio',
  })
  getHistory(
    @Query('userId', new ParseIntPipe({ optional: true })) userId?: number,
  ) {
    return this.balanceService.getHistory(userId);
  }

  @Get('charge-message/me')
  @ApiOperation({
    summary: 'Gerar mensagem de cobranÃ§a para o usuÃ¡rio autenticado',
    description:
      'Gera uma mensagem formatada para WhatsApp/Email com as dÃ­vidas pendentes',
  })
  @ApiResponse({
    status: 200,
    description: 'Mensagem de cobranÃ§a gerada',
    schema: {
      example: {
        message:
          'ğŸ’° *Resumo de Contas - Racha do MÃªs*\n\nOlÃ¡! Aqui estÃ¡ um resumo das suas contas:\n\nâ€¢ VocÃª deve *R$ 750.00* para Maria Santos\n\nğŸ“Š *Total a pagar: R$ 750.00*\n\nPor favor, realize o pagamento o mais breve possÃ­vel. Obrigado! ğŸ˜Š',
      },
    },
  })
  getMyChargeMessage(@CurrentUser() user: any) {
    return this.balanceService
      .generateChargeMessage(user.userId)
      .then((message) => ({ message }));
  }

  @Get('charge-message/:userId')
  @ApiOperation({
    summary: 'Gerar mensagem de cobranÃ§a para um usuÃ¡rio',
    description:
      'Gera uma mensagem formatada para WhatsApp/Email com as dÃ­vidas pendentes de um usuÃ¡rio especÃ­fico',
  })
  @ApiResponse({
    status: 200,
    description: 'Mensagem de cobranÃ§a gerada',
  })
  @ApiResponse({ status: 404, description: 'UsuÃ¡rio nÃ£o encontrado' })
  getChargeMessage(@Param('userId', ParseIntPipe) userId: number) {
    return this.balanceService
      .generateChargeMessage(userId)
      .then((message) => ({ message }));
  }
}
